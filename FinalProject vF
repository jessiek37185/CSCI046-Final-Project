"""
Library Book Management System

Design a system that allows users to check out, return and search for books in library.
The system keeps track of book availability and allow efficient retrieval. 

Data Strucutres Used: Linked List, Hashmap, Queue
"""
# Book Class 
class Book:
    def __init__(self, isbn, title, author, category):
        self.isbn = isbn
        self.title = title
        self.author = author
        self.category = category
        self.available = True
        self.reservation_queue = Queue()

    def reserve_book(self, user):
        self.reservation_queue.enqueue(user)

    def next_in_queue(self):
        return self.reservation_queue.dequeue()

# the linked list node which is for the borrowing history
class LinkedListNode:
    def __init__(self, book):
        self.book = book
        self.next = None

# Borrowing History where we use a linked list
class BorrowHistory:
    def __init__(self):
        self.head = None

    def add_book(self, book):
        new_node = LinkedListNode(book)

        if not self.head:
            self.head = new_node
        else:
            current = self.head

            while current.next:
                current = current.next
            current.next = new_node

    def print_history(self):
        current = self.head
        if not current:
            print("No borrowing history.")
            return
        i = 1
        while current:
            print(f"{i}.{current.book.title} by {current.book.author}")
            current = current.next
            i += 1


# User Class 
class User:
    def __init__(self, user_id, name):

        self.user_id = user_id
        self.name = name
        self.borrow_history = BorrowHistory()

# Queue Node Class
class QueueNode:
    def __init__(self, data):
        self.data = data
        self.next = None

# Queue Class 
class Queue:
    def __init__(self):
        self.front = None
        self.rear = None
        self.size = 0
        
    def is_empty(self):
        return self.front is None
        
    # add data at the end 
    def enqueue(self, data):
        new_node = QueueNode(data)
        if self.is_empty():

            self.front = self.rear = new_node
        else:

            self.rear.next = new_node
            self.rear = new_node
        self.size += 1
        print(f"Enqueued: {data.name}")
        
    # remove data from the front
    def dequeue(self):
        if self.is_empty():
            print("Queue is empty. Nothing to dequeue.")
            return None
        
        temp = self.front
        self.front = temp.next

        if self.front is None:
            self.rear = None
        self.size -= 1

        print(f"Dequeued: {temp.data.name}") 
        return temp.data

    def peek(self):
        if self.is_empty():

            return None
        return self.front.data


class organizationNode:
    def __init__(self, name, address, studentCount, organization):
        self.name = name
        self.address = address
        self.studentCount = studentCount
        self.library = Library(name, organization)
        self.next = None

class Organization: #stack
    def __init__(self):
        self.head = None
        self.tail = None
        self.count = 0

    def addNewLibrary(self,name, address, studentCount):
        new = organizationNode(name, address, studentCount, self)

        if self.head == None:
            self.head = new
            self.tail = new

        else:
            new.next = self.head #LIFO
            self.head = new
        self.count += 1

    def interOrgSearch(self, isbn, currentLibrary):
        current = self.head
        found = []

        while current != None:
            if current.name != currentLibrary:
                if isbn in current.library.books:
                    foundBook = current.library.books[isbn]

                    if foundBook.available == True:
                        found.append((current.name, foundBook.title, foundBook.author))

            current = current.next
        if found:
            print(f"\nFound {isbn} in another library!")
        else:
            print(f"\n{isbn} not found in other libraries.")

    

# Library System where we use a hash table
class Library:
    def __init__(self,name, organization):
        self.books = {}  
        self.users = {}  
        self.name = name
        self.organization = organization

    def add_book(self, isbn, title, author, category):
        
        if isbn not in self.books: #edge case: isbn existed
            self.books[isbn] = Book(isbn, title, author, category)
            print(f"Added book: {title}.")
        else:
            print("Book with this ISBN already exists.")

    def add_user(self, user_id, name):
        if user_id not in self.users: 
            self.users[user_id] = User(user_id, name)
            print(f"User {name} added.")

        else:
            print("User already exists.")

    # keywords are basically title, author, ISBN, or category
    def search_books(self, keyword):
        results = []
        for book in self.books.values():
            if (keyword.lower() in book.title.lower() or keyword.lower() in book.author.lower() or keyword.lower() in book.category.lower() or keyword.lower() == book.isbn.lower()):
                results.append(book)

        if results:

            print("\n==============================================")
            print(f"---------- Search Results for '{keyword}' ----------")
            print("==============================================")

            for book in results:
                status = "Available" if book.available else "Checked Out"
                print(f"- {book.title} by {book.author} is {status}")
        else: 
            print("No books found.")

    def checkout_book(self, isbn, user_id, is_auto= False):

        if isbn in self.books and user_id in self.users:
            book = self.books[isbn]
            user = self.users[user_id]

            if book.available:
                book.available = False
                user.borrow_history.add_book(book)

                print(f"\n Successfully checked out:")
                print(f" - User: {self.users[user_id].name}")
                print(f" - Title: {book.title}")
                print(f" - Author: {book.author}")
                print(f" - Category: {book.category}")
            else:
                if not is_auto: #automatc checkout (from book being reserved) is not on
                    if self.organization:
                        print(f"\n {book.title} is currently checked out. {user.name} is looking for available copies in other libraries...\n")

                        current = self.organization.head
                        found_elsewhere = False

                        while current:
                            if current.name != self.name: 
                                if isbn in current.library.books:
                                    other_book = current.library.books[isbn]

                                    if other_book.available:
                                        print(f"Found available copy of '{book.title}' at {current.name}. Checking it out there instead!")

                                        if user_id not in current.library.users:
                                            current.library.add_user(user_id, user.name)

                                        current.library.checkout_book(isbn, user_id)

                                        found_elsewhere = True
                                        break

                            current = current.next

                        if not found_elsewhere:
                            print(f"No available copies found in other libraries. {user.name} has been added to the reservation queue.\n")
                            book.reserve_book(user)
                    else:
                        #If the library is not in an organization we just have the system reserve it
                        print(f"\n {book.title} is currently checked out. {user.name} has been added to the reservation queue.\n")
                        
                        book.reserve_book(user)
                else:
                    book.reserve_book(user)

        elif isbn not in self.books and user_id in self.users:
            print(f"\n{isbn} not found in {self.name}. Searching other libraries in the organization...")

            #Search other libraries for the book and check it out there
            current = self.organization.head
            found = False

            while current:
                if current.name != self.name:
                    if isbn in current.library.books:
                        print(f"Found {isbn} at {current.name}. Checking it out there instead!")

                        user = self.users[user_id]

                        if user_id not in current.library.users:
                            current.library.add_user(user_id, user.name)

                        current.library.checkout_book(isbn, user_id)
                        found = True
                        break

                current = current.next

            if not found:
                print(f"Book with ISBN {isbn} not found in any library in the organization.")

        else:
            print("Invalid ISBN or User ID.")

    def return_book(self, isbn):
        if isbn in self.books:
            book = self.books[isbn]

            if not book.available:
                next_user = book.next_in_queue()

                if next_user:
                    # before autho-checking out, mark book as available
                    book.available = True

                    print("\n==============================================")
                    print(f"---------------- System Message --------------")
                    print("==============================================")
                    print(f"{book.title} returned. Reserved by {next_user.name}. \nAuto-checking out to them.")
                    
                    self.checkout_book(isbn, next_user.user_id, is_auto=True)
                else:
                    book.available = True
                    print("\n==============================================")
                    print(f"---------------- System Message --------------")
                    print("==============================================")
                    print(f"{book.title} is now available.\n")
            else:
                print("Book is already available.")
        else:
            print("Invalid ISBN.")

    def view_user_history(self, user_id):
        if user_id in self.users:
            print("\n==============================================")
            print(f"------------- Borrowing History for {self.users[user_id].name} -------------")
            print("==============================================")

            self.users[user_id].borrow_history.print_history()
            print("\n")
        else:
            print("User not found.")


print("\nInitializing 5C Consortium and Libraries...")

if __name__ == "__main__":
    import time

    fiveCConsortium = Organization()

    print("\nSTEP 1: Adding Libraries to Consortium")
    fiveCConsortium.addNewLibrary("Claremont Library", "800 N Dartmouth Ave", 1389)
    fiveCConsortium.addNewLibrary("Pomona Library", "333 N College Way", 1761)
    fiveCConsortium.addNewLibrary("Harvey Mudd Library", "1030 N Columbia Ave", 1103)

    time.sleep(2)

    #so that we can add to them later
    harvey_mudd_lib = fiveCConsortium.head
    pomona_lib = harvey_mudd_lib.next
    claremont_lib = pomona_lib.next

    print("\nCurrent Libraries in 5C Consortium:")
    current = fiveCConsortium.head
    i = 1
    while current:
        print(f"{i}. {current.name} | Address: {current.address} | Students: {current.studentCount}")
        current = current.next
        i += 1

    time.sleep(2)

    print("\nSTEP 2: Add Books to Each Library")
    harvey_mudd_lib.library.add_book("001", "The Great Gatsby", "F. Scott Fitzgerald", "Fiction")
    pomona_lib.library.add_book("002", "1984", "George Orwell", "Dystopian")
    claremont_lib.library.add_book("003", "The Art of Computer Programming", "Donald Knuth", "Computer Science")

    time.sleep(2)

    print("\nSTEP 3: Adding Users to Each Library")
    harvey_mudd_lib.library.add_user("U1", "Alice")
    harvey_mudd_lib.library.add_user("U2", "Bob")
    pomona_lib.library.add_user("U3", "Charlie")
    claremont_lib.library.add_user("U4", "Diana")
    harvey_mudd_lib.library.add_user("U5", "Eve") 

    time.sleep(2)

    print("\nSTEP 4: Search for 'Fiction' in Harvey Mudd Library (should find The Great Gatsby)")
    harvey_mudd_lib.library.search_books("Fiction")

    time.sleep(2)

    print("\nSTEP 5: Alice Checks Out 'The Great Gatsby' at Harvey Mudd Library")
    harvey_mudd_lib.library.checkout_book("001", "U1")

    time.sleep(2)

    print("\nSTEP 6: Bob Tries to Check Out The Great Gatsby (but its already checked out) at Harvey Mudd Library")
    harvey_mudd_lib.library.checkout_book("001", "U2")

    time.sleep(2)

    print("\nSTEP 7: Charlie Checks Out '1984' at the Pomona Library")
    pomona_lib.library.checkout_book("002", "U3")

    time.sleep(2)

    print("\nSTEP 8: Diana Checks Out 'The Art of Computer Programming' at the Claremont Library")
    claremont_lib.library.checkout_book("003", "U4")

    time.sleep(2)

    print("\nSTEP 9: Eve Tries to Check Out '1984' at Harvey Mudd Library (should find in Pomona Library instead)")
    harvey_mudd_lib.library.checkout_book("002", "U5")

    time.sleep(2)

    print("\nSTEP 10: Borrowing History in Harvey Mudd Library")
    harvey_mudd_lib.library.view_user_history("U1")
    harvey_mudd_lib.library.view_user_history("U2")
    harvey_mudd_lib.library.view_user_history("U5")

    time.sleep(2)

    print("\nBorrowing History in Pomona Library")
    pomona_lib.library.view_user_history("U3")

    time.sleep(2)

    print("\nBorrowing History in Claremont Library")
    claremont_lib.library.view_user_history("U4")

    time.sleep(2)

    print("\nSTEP 11: Alice Returns The Great Gatsby at Harvey Mudd Library (Bob should Auto-Checkout)")
    harvey_mudd_lib.library.return_book("001")

    time.sleep(2)

    print("\nSTEP 12: Updated Borrowing History in Harvey Mudd Library")
    harvey_mudd_lib.library.view_user_history("U1")
    harvey_mudd_lib.library.view_user_history("U2")

    time.sleep(2)

    print("\nSTEP 13: Try to Return 'The Great Gatsby' Again")
    harvey_mudd_lib.library.return_book("001")

    time.sleep(2)

    print("\nSTEP 14: Final Snapshot of all the Libraries in the 5C Consortium")
    current = fiveCConsortium.head

    i = 1
    while current:
        print(f"{i}. {current.name} | Address: {current.address} | Students: {current.studentCount}")
        current = current.next
        i += 1
    
    time.sleep(2)

    print(f"\nTotal libraries in 5C Consortium: {fiveCConsortium.count}")
